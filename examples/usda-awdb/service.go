package main 

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type Duration string

const (
	DurationDAILY Duration = "DAILY"

	DurationMONTHLY Duration = "MONTHLY"

	DurationSEMIMONTHLY Duration = "SEMIMONTHLY"

	DurationWATERYEAR Duration = "WATERYEAR"

	DurationCALENDARYEAR Duration = "CALENDARYEAR"

	DurationHOURLY Duration = "HOURLY"

	DurationSEASONAL Duration = "SEASONAL"

	DurationANNUAL Duration = "ANNUAL"
)

type DataSource string

const (
	DataSourceOBSERVED DataSource = "OBSERVED"

	DataSourceDERIVED DataSource = "DERIVED"

	DataSourceINTERPRETED DataSource = "INTERPRETED"
)

type CentralTendencyType string

const (
	CentralTendencyTypeAVERAGE CentralTendencyType = "AVERAGE"

	CentralTendencyTypeMEDIAN CentralTendencyType = "MEDIAN"

	CentralTendencyTypeNORMAL CentralTendencyType = "NORMAL"
)

type InstantaneousDataFilter string

const (
	InstantaneousDataFilterALL InstantaneousDataFilter = "ALL"

	InstantaneousDataFilterFIRSTOFDAY InstantaneousDataFilter = "FIRSTOFDAY"

	InstantaneousDataFilterMIDNIGHTONLY InstantaneousDataFilter = "MIDNIGHTONLY"
)

type UnitSystem string

const (
	UnitSystemENGLISH UnitSystem = "ENGLISH"

	UnitSystemLASTCOLLECTED UnitSystem = "LASTCOLLECTED"
)

type GetForecasts struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecasts"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	ForecastPeriod string `xml:"forecastPeriod,omitempty"`
}

type GetForecastsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastsResponse"`

	Return_ []*Forecast `xml:"return,omitempty"`
}

type Forecast struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecast"`

	CalculationDate string `xml:"calculationDate,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	ExceedenceProbabilities []int32 `xml:"exceedenceProbabilities,omitempty"`

	ExceedenceValues []float64 `xml:"exceedenceValues,omitempty"`

	ForecastPeriod string `xml:"forecastPeriod,omitempty"`

	PeriodAverage float64 `xml:"periodAverage,omitempty"`

	PublicationDate string `xml:"publicationDate,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	UnitCd string `xml:"unitCd,omitempty"`
}

type GetStations struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStations"`

	StationIds []string `xml:"stationIds,omitempty"`

	StateCds []string `xml:"stateCds,omitempty"`

	NetworkCds []string `xml:"networkCds,omitempty"`

	Hucs []string `xml:"hucs,omitempty"`

	CountyNames []string `xml:"countyNames,omitempty"`

	MinLatitude float64 `xml:"minLatitude,omitempty"`

	MaxLatitude float64 `xml:"maxLatitude,omitempty"`

	MinLongitude float64 `xml:"minLongitude,omitempty"`

	MaxLongitude float64 `xml:"maxLongitude,omitempty"`

	MinElevation float64 `xml:"minElevation,omitempty"`

	MaxElevation float64 `xml:"maxElevation,omitempty"`

	ElementCds []string `xml:"elementCds,omitempty"`

	Ordinals []int32 `xml:"ordinals,omitempty"`

	HeightDepths []*HeightDepth `xml:"heightDepths,omitempty"`

	LogicalAnd bool `xml:"logicalAnd,omitempty"`
}

type HeightDepth struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService heightDepth"`

	UnitCd string `xml:"unitCd,omitempty"`

	Value float64 `xml:"value,omitempty"`
}

type GetStationsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationsResponse"`

	Return_ []string `xml:"return,omitempty"`
}

type GetForecastsByPubDate struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastsByPubDate"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	ForecastPeriod string `xml:"forecastPeriod,omitempty"`

	BeginPublicationDate string `xml:"beginPublicationDate,omitempty"`

	EndPublicationDate string `xml:"endPublicationDate,omitempty"`
}

type GetForecastsByPubDateResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastsByPubDateResponse"`

	Return_ []*Forecast `xml:"return,omitempty"`
}

type GetAveragesData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAveragesData"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	GetFlags bool `xml:"getFlags,omitempty"`

	BeginMonth int32 `xml:"beginMonth,omitempty"`

	BeginDay int32 `xml:"beginDay,omitempty"`

	EndMonth int32 `xml:"endMonth,omitempty"`

	EndDay int32 `xml:"endDay,omitempty"`
}

type GetAveragesDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAveragesDataResponse"`

	Return_ []*AveragesData `xml:"return,omitempty"`
}

type AveragesData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService averagesData"`

	BeginDay int32 `xml:"beginDay,omitempty"`

	BeginMonth int32 `xml:"beginMonth,omitempty"`

	DataSetFlag string `xml:"dataSetFlag,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	EndDay int32 `xml:"endDay,omitempty"`

	EndMonth int32 `xml:"endMonth,omitempty"`

	Flags []string `xml:"flags,omitempty"`

	Values []float64 `xml:"values,omitempty"`
}

type RunDiagnostics struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService runDiagnostics"`
}

type RunDiagnosticsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService runDiagnosticsResponse"`

	Return_ *Diagnostics `xml:"return,omitempty"`
}

type Diagnostics struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService diagnostics"`

	HasSucceeded bool `xml:"hasSucceeded,omitempty"`

	TestResults []*DiagnosticTestResult `xml:"testResults,omitempty"`
}

type DiagnosticTestResult struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService diagnosticTestResult"`

	ErrorMessage string `xml:"errorMessage,omitempty"`

	Exception *DiagnosticException `xml:"exception,omitempty"`

	HasSucceeded bool `xml:"hasSucceeded,omitempty"`

	TestDescription string `xml:"testDescription,omitempty"`
}

type DiagnosticException struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService diagnosticException"`

	Cause *DiagnosticException `xml:"cause,omitempty"`

	ExceptionClass string `xml:"exceptionClass,omitempty"`

	Message string `xml:"message,omitempty"`

	StrackTrace []*DiagnosticStackTraceElement `xml:"strackTrace,omitempty"`
}

type DiagnosticStackTraceElement struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService diagnosticStackTraceElement"`

	ClassName string `xml:"className,omitempty"`

	FileName string `xml:"fileName,omitempty"`

	LineNumber int32 `xml:"lineNumber,omitempty"`

	MethodName string `xml:"methodName,omitempty"`
}

type GetHourlyData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getHourlyData"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	Ordinal int32 `xml:"ordinal,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	BeginDate string `xml:"beginDate,omitempty"`

	EndDate string `xml:"endDate,omitempty"`

	BeginHour int32 `xml:"beginHour,omitempty"`

	EndHour int32 `xml:"endHour,omitempty"`
}

type GetHourlyDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getHourlyDataResponse"`

	Return_ []*HourlyData `xml:"return,omitempty"`
}

type HourlyData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService hourlyData"`

	BeginDate string `xml:"beginDate,omitempty"`

	EndDate string `xml:"endDate,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	Values []*HourlyDataValue `xml:"values,omitempty"`
}

type HourlyDataValue struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService hourlyDataValue"`

	DateTime string `xml:"dateTime,omitempty"`

	Flag string `xml:"flag,omitempty"`

	Value float64 `xml:"value,omitempty"`
}

type GetForecastEquations struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastEquations"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type GetForecastEquationsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastEquationsResponse"`

	Return_ []*ForecastEquation `xml:"return,omitempty"`
}

type ForecastEquation struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastEquation"`

	Comment string `xml:"comment,omitempty"`

	DataSource string `xml:"dataSource,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	EquationTerms []*ForecastEquationTerm `xml:"equationTerms,omitempty"`

	Footnotes string `xml:"footnotes,omitempty"`

	ForecastCondition string `xml:"forecastCondition,omitempty"`

	ForecastPeriod string `xml:"forecastPeriod,omitempty"`

	ForecastType string `xml:"forecastType,omitempty"`

	Function string `xml:"function,omitempty"`

	FunctionArgument float64 `xml:"functionArgument,omitempty"`

	InterceptConstant float64 `xml:"interceptConstant,omitempty"`

	Key int32 `xml:"key,omitempty"`

	MaxOfRecord float64 `xml:"maxOfRecord,omitempty"`

	MinOfRecord float64 `xml:"minOfRecord,omitempty"`

	MonthlyCorrelationCoefficients []float64 `xml:"monthlyCorrelationCoefficients,omitempty"`

	MonthlyStderrValues []float64 `xml:"monthlyStderrValues,omitempty"`

	Name string `xml:"name,omitempty"`

	PublicationMonthsAndDays []*MonthAndDay `xml:"publicationMonthsAndDays,omitempty"`

	Published bool `xml:"published,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	TransformErrorsOnly bool `xml:"transformErrorsOnly,omitempty"`

	UnitCd string `xml:"unitCd,omitempty"`
}

type ForecastEquationTerm struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastEquationTerm"`

	Coefficient float64 `xml:"coefficient,omitempty"`

	DataPeriodDays string `xml:"dataPeriodDays,omitempty"`

	DataPeriodMonth string `xml:"dataPeriodMonth,omitempty"`

	DataYearFlag string `xml:"dataYearFlag,omitempty"`

	StationElement *StationElement `xml:"stationElement,omitempty"`

	UnitCd string `xml:"unitCd,omitempty"`

	UpstreamForecast bool `xml:"upstreamForecast,omitempty"`
}

type StationElement struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService stationElement"`

	BeginDate string `xml:"beginDate,omitempty"`

	DataPrecision int32 `xml:"dataPrecision,omitempty"`

	DataSource *DataSource `xml:"dataSource,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	EndDate string `xml:"endDate,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	Ordinal int32 `xml:"ordinal,omitempty"`

	OriginalUnitCd string `xml:"originalUnitCd,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	StoredUnitCd string `xml:"storedUnitCd,omitempty"`
}

type MonthAndDay struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService monthAndDay"`

	Day int32 `xml:"day,omitempty"`

	Month int32 `xml:"month,omitempty"`
}

type GetUnitName struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getUnitName"`

	UnitCd string `xml:"unitCd,omitempty"`
}

type GetUnitNameResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getUnitNameResponse"`

	Return_ string `xml:"return,omitempty"`
}

type GetStationMetadataMultiple struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationMetadataMultiple"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`
}

type GetStationMetadataMultipleResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationMetadataMultipleResponse"`

	Return_ []*StationMetaData `xml:"return,omitempty"`
}

type StationMetaData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService stationMetaData"`

	ActonId string `xml:"actonId,omitempty"`

	BeginDate string `xml:"beginDate,omitempty"`

	CountyName string `xml:"countyName,omitempty"`

	Elevation float64 `xml:"elevation,omitempty"`

	EndDate string `xml:"endDate,omitempty"`

	FipsCountryCd string `xml:"fipsCountryCd,omitempty"`

	FipsCountyCd string `xml:"fipsCountyCd,omitempty"`

	FipsStateNumber string `xml:"fipsStateNumber,omitempty"`

	Huc string `xml:"huc,omitempty"`

	Hud string `xml:"hud,omitempty"`

	Latitude float64 `xml:"latitude,omitempty"`

	Longitude float64 `xml:"longitude,omitempty"`

	Name string `xml:"name,omitempty"`

	ShefId string `xml:"shefId,omitempty"`

	StationDataTimeZone float64 `xml:"stationDataTimeZone,omitempty"`

	StationTimeZone float64 `xml:"stationTimeZone,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type GetForecastPoint struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPoint"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type GetForecastPointResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPointResponse"`

	Return_ *ForecastPoint `xml:"return,omitempty"`
}

type ForecastPoint struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastPoint"`

	ExceedenceProbabilities []int32 `xml:"exceedenceProbabilities,omitempty"`

	Name string `xml:"name,omitempty"`

	ResponsibleForecaster string `xml:"responsibleForecaster,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type GetStationDataAssuredFlags struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationDataAssuredFlags"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	Ordinal int32 `xml:"ordinal,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	DurationCd string `xml:"durationCd,omitempty"`

	BeginWaterYear int32 `xml:"beginWaterYear,omitempty"`

	EndWaterYear int32 `xml:"endWaterYear,omitempty"`
}

type GetStationDataAssuredFlagsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationDataAssuredFlagsResponse"`

	Return_ []*StationDataAssuredFlags `xml:"return,omitempty"`
}

type StationDataAssuredFlags struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService stationDataAssuredFlags"`

	AssuredFlags []string `xml:"assuredFlags,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type GetForecastEquationsMultiple struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastEquationsMultiple"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`
}

type GetForecastEquationsMultipleResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastEquationsMultipleResponse"`

	Return_ []*ForecastEquation `xml:"return,omitempty"`
}

type GetForecastPeriodCentralTendency struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodCentralTendency"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	Periods []string `xml:"periods,omitempty"`

	CentralTendencyType *CentralTendencyType `xml:"centralTendencyType,omitempty"`
}

type GetForecastPeriodCentralTendencyResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodCentralTendencyResponse"`

	Return_ []*ForecastPeriodCentralTendency `xml:"return,omitempty"`
}

type ForecastPeriodCentralTendency struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastPeriodCentralTendency"`

	*ForecastPeriodAverage

	CentralTendencyType *CentralTendencyType `xml:"centralTendencyType,omitempty"`
}

type ForecastPeriodAverage struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastPeriodAverage"`

	Flag string `xml:"flag,omitempty"`

	ForecastPeriod string `xml:"forecastPeriod,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	Value float64 `xml:"value,omitempty"`
}

type GetForecastValue struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastValue"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	ForecastPeriod string `xml:"forecastPeriod,omitempty"`

	Probability int32 `xml:"probability,omitempty"`

	PublicationYear int32 `xml:"publicationYear,omitempty"`

	PublicationMonth int32 `xml:"publicationMonth,omitempty"`

	PublicationDay int32 `xml:"publicationDay,omitempty"`
}

type GetForecastValueResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastValueResponse"`

	Return_ float64 `xml:"return,omitempty"`
}

type GetElement struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getElement"`

	ElementCd string `xml:"elementCd,omitempty"`
}

type GetElementResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getElementResponse"`

	Return_ *Element `xml:"return,omitempty"`
}

type Element struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService element"`

	ElementCd string `xml:"elementCd,omitempty"`

	Name string `xml:"name,omitempty"`

	StoredUnitCd string `xml:"storedUnitCd,omitempty"`
}

type GetForecastConfigurations struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastConfigurations"`

	Forecaster string `xml:"forecaster,omitempty"`
}

type GetForecastConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastConfigurationsResponse"`

	Return_ []*Configuration `xml:"return,omitempty"`
}

type Configuration struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService configuration"`

	AnalysisType string `xml:"analysisType,omitempty"`

	CalibrationEndYear int32 `xml:"calibrationEndYear,omitempty"`

	CalibrationStartYear int32 `xml:"calibrationStartYear,omitempty"`

	Comment string `xml:"comment,omitempty"`

	ComponentsToRetain int32 `xml:"componentsToRetain,omitempty"`

	CreationDate string `xml:"creationDate,omitempty"`

	DailyForecast bool `xml:"dailyForecast,omitempty"`

	DailyForecastThreshold float64 `xml:"dailyForecastThreshold,omitempty"`

	DailyForecastThresholdRelative bool `xml:"dailyForecastThresholdRelative,omitempty"`

	DataForcedSeriallyComplete bool `xml:"dataForcedSeriallyComplete,omitempty"`

	DegreesOfFreedom int32 `xml:"degreesOfFreedom,omitempty"`

	ForecastCondition string `xml:"forecastCondition,omitempty"`

	ForecastType string `xml:"forecastType,omitempty"`

	Forecaster string `xml:"forecaster,omitempty"`

	FunctionArgument float64 `xml:"functionArgument,omitempty"`

	FunctionCd string `xml:"functionCd,omitempty"`

	HelperDataSource string `xml:"helperDataSource,omitempty"`

	HelperElementCd string `xml:"helperElementCd,omitempty"`

	HelperEndDay int32 `xml:"helperEndDay,omitempty"`

	HelperEndMonth int32 `xml:"helperEndMonth,omitempty"`

	HelperEndYearFlag string `xml:"helperEndYearFlag,omitempty"`

	HelperMixedPastEndDay int32 `xml:"helperMixedPastEndDay,omitempty"`

	HelperMixedPastEndMonth int32 `xml:"helperMixedPastEndMonth,omitempty"`

	HelperMixedPastEndYearFlag string `xml:"helperMixedPastEndYearFlag,omitempty"`

	HelperMixedPastStartDay int32 `xml:"helperMixedPastStartDay,omitempty"`

	HelperMixedPastStartMonth int32 `xml:"helperMixedPastStartMonth,omitempty"`

	HelperMixedPastStartYearFlag string `xml:"helperMixedPastStartYearFlag,omitempty"`

	HelperPredictorUsed bool `xml:"helperPredictorUsed,omitempty"`

	HelperStartDay int32 `xml:"helperStartDay,omitempty"`

	HelperStartMonth int32 `xml:"helperStartMonth,omitempty"`

	HelperStartYearFlag string `xml:"helperStartYearFlag,omitempty"`

	HelperStationTriplet string `xml:"helperStationTriplet,omitempty"`

	HelperUsedInOverlappingYears bool `xml:"helperUsedInOverlappingYears,omitempty"`

	HelperVarianceMatchedToObserved bool `xml:"helperVarianceMatchedToObserved,omitempty"`

	JackKnifingUsed bool `xml:"jackKnifingUsed,omitempty"`

	Key int32 `xml:"key,omitempty"`

	MinimumR2ForPredictor float64 `xml:"minimumR2ForPredictor,omitempty"`

	MinimumYearsForPredictor int32 `xml:"minimumYearsForPredictor,omitempty"`

	MixedPastEndDay int32 `xml:"mixedPastEndDay,omitempty"`

	MixedPastEndMonth int32 `xml:"mixedPastEndMonth,omitempty"`

	MixedPastEndYearFlag string `xml:"mixedPastEndYearFlag,omitempty"`

	MixedPastStartDay int32 `xml:"mixedPastStartDay,omitempty"`

	MixedPastStartMonth int32 `xml:"mixedPastStartMonth,omitempty"`

	MixedPastStartYearFlag string `xml:"mixedPastStartYearFlag,omitempty"`

	MixedPastUsed bool `xml:"mixedPastUsed,omitempty"`

	Name string `xml:"name,omitempty"`

	NumYearsUsed int32 `xml:"numYearsUsed,omitempty"`

	OptimalWeightingUsed bool `xml:"optimalWeightingUsed,omitempty"`

	OverrideAverage float64 `xml:"overrideAverage,omitempty"`

	OverrideStderr float64 `xml:"overrideStderr,omitempty"`

	PastFlowRealtime float64 `xml:"pastFlowRealtime,omitempty"`

	PredictorGroups []*PredictorGroup `xml:"predictorGroups,omitempty"`

	Predictors []*Predictor `xml:"predictors,omitempty"`

	PreprocessingConstant float64 `xml:"preprocessingConstant,omitempty"`

	PreprocessingMultiplier float64 `xml:"preprocessingMultiplier,omitempty"`

	PublicationCd string `xml:"publicationCd,omitempty"`

	TTestLimit float64 `xml:"TTestLimit,omitempty"`

	TargetDataSource string `xml:"targetDataSource,omitempty"`

	TargetElementCd string `xml:"targetElementCd,omitempty"`

	TargetEndDay int32 `xml:"targetEndDay,omitempty"`

	TargetEndMonth int32 `xml:"targetEndMonth,omitempty"`

	TargetEndYearFlag string `xml:"targetEndYearFlag,omitempty"`

	TargetStartDay int32 `xml:"targetStartDay,omitempty"`

	TargetStartMonth int32 `xml:"targetStartMonth,omitempty"`

	TargetStartYearFlag string `xml:"targetStartYearFlag,omitempty"`

	TargetStationName string `xml:"targetStationName,omitempty"`

	TargetStationTriplet string `xml:"targetStationTriplet,omitempty"`

	TransformErrorsOnly bool `xml:"transformErrorsOnly,omitempty"`
}

type PredictorGroup struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService predictorGroup"`

	CustomStationListName string `xml:"customStationListName,omitempty"`

	DataSourceCd string `xml:"dataSourceCd,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	GlobalMonthChangeAllowed bool `xml:"globalMonthChangeAllowed,omitempty"`

	GroupName string `xml:"groupName,omitempty"`

	GroupNumber int32 `xml:"groupNumber,omitempty"`

	NegativeWeightAllowed bool `xml:"negativeWeightAllowed,omitempty"`

	Networks string `xml:"networks,omitempty"`

	States string `xml:"states,omitempty"`

	UpstreamForecast bool `xml:"upstreamForecast,omitempty"`
}

type Predictor struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService predictor"`

	EndDay int32 `xml:"endDay,omitempty"`

	EndMonth int32 `xml:"endMonth,omitempty"`

	EndYearFlag string `xml:"endYearFlag,omitempty"`

	GroupNumber int32 `xml:"groupNumber,omitempty"`

	PredictorNumber int32 `xml:"predictorNumber,omitempty"`

	PredictorUsed bool `xml:"predictorUsed,omitempty"`

	StartDay int32 `xml:"startDay,omitempty"`

	StartMonth int32 `xml:"startMonth,omitempty"`

	StartYearFlag string `xml:"startYearFlag,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type GetReservoirMetadataMultiple struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getReservoirMetadataMultiple"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`
}

type GetReservoirMetadataMultipleResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getReservoirMetadataMultipleResponse"`

	Return_ []*ReservoirMetadata `xml:"return,omitempty"`
}

type ReservoirMetadata struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService reservoirMetadata"`

	ElevationAtCapacity float64 `xml:"elevationAtCapacity,omitempty"`

	ReservoirCapacity float64 `xml:"reservoirCapacity,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	UsableCapacity float64 `xml:"usableCapacity,omitempty"`
}

type GetCentralTendencyPeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getCentralTendencyPeakData"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	GetFlags bool `xml:"getFlags,omitempty"`

	CentralTendencyType *CentralTendencyType `xml:"centralTendencyType,omitempty"`
}

type GetCentralTendencyPeakDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getCentralTendencyPeakDataResponse"`

	Return_ []*CentralTendencyPeakData `xml:"return,omitempty"`
}

type CentralTendencyPeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService centralTendencyPeakData"`

	*AveragesPeakData

	CentralTendencyType *CentralTendencyType `xml:"centralTendencyType,omitempty"`
}

type AveragesPeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService averagesPeakData"`

	Duration *Duration `xml:"duration,omitempty"`

	Flag string `xml:"flag,omitempty"`

	PeakDay int32 `xml:"peakDay,omitempty"`

	PeakMonth int32 `xml:"peakMonth,omitempty"`

	Value float64 `xml:"value,omitempty"`
}

type GetForecast struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecast"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	ForecastPeriod string `xml:"forecastPeriod,omitempty"`

	PublicationDate string `xml:"publicationDate,omitempty"`
}

type GetForecastResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastResponse"`

	Return_ *Forecast `xml:"return,omitempty"`
}

type GetReservoirMetadata struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getReservoirMetadata"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type GetReservoirMetadataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getReservoirMetadataResponse"`

	Return_ *ReservoirMetadata `xml:"return,omitempty"`
}

type GetForecastPeriodAverages struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodAverages"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	Periods []string `xml:"periods,omitempty"`
}

type GetForecastPeriodAveragesResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodAveragesResponse"`

	Return_ []*ForecastPeriodAverage `xml:"return,omitempty"`
}

type GetAllForecastsForStation struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAllForecastsForStation"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	BeginPublicationDate string `xml:"beginPublicationDate,omitempty"`

	EndPublicationDate string `xml:"endPublicationDate,omitempty"`
}

type GetAllForecastsForStationResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAllForecastsForStationResponse"`

	Return_ []*ForecastFull `xml:"return,omitempty"`
}

type ForecastFull struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastFull"`

	Comment string `xml:"comment,omitempty"`

	Configuration *Configuration `xml:"configuration,omitempty"`

	CoordinatedForecastIssueDate string `xml:"coordinatedForecastIssueDate,omitempty"`

	CoordinatedForecastProbabilities []float64 `xml:"coordinatedForecastProbabilities,omitempty"`

	CoordinatedForecastValues []float64 `xml:"coordinatedForecastValues,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	Equation *ForecastEquation `xml:"equation,omitempty"`

	ForecastFinal bool `xml:"forecastFinal,omitempty"`

	ForecastPeriodCd string `xml:"forecastPeriodCd,omitempty"`

	ForecastPeriodName string `xml:"forecastPeriodName,omitempty"`

	Forecaster string `xml:"forecaster,omitempty"`

	HydrologistForecastIssueDate string `xml:"hydrologistForecastIssueDate,omitempty"`

	HydrologistForecastProbabilities []float64 `xml:"hydrologistForecastProbabilities,omitempty"`

	HydrologistForecastValues []float64 `xml:"hydrologistForecastValues,omitempty"`

	OriginalForecastIssueDate string `xml:"originalForecastIssueDate,omitempty"`

	OriginalForecastProbabilities []float64 `xml:"originalForecastProbabilities,omitempty"`

	OriginalForecastValues []float64 `xml:"originalForecastValues,omitempty"`

	OtherAgencyCds []string `xml:"otherAgencyCds,omitempty"`

	OtherAgencyForecastValues []float64 `xml:"otherAgencyForecastValues,omitempty"`

	PeriodAverage float64 `xml:"periodAverage,omitempty"`

	PublicationDate string `xml:"publicationDate,omitempty"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	UnitCd string `xml:"unitCd,omitempty"`
}

type GetStationElements struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationElements"`

	StationTriplet string `xml:"stationTriplet,omitempty"`

	BeginDate string `xml:"beginDate,omitempty"`

	EndDate string `xml:"endDate,omitempty"`
}

type GetStationElementsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationElementsResponse"`

	Return_ []*StationElement `xml:"return,omitempty"`
}

type GetInstantaneousData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getInstantaneousData"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	Ordinal int32 `xml:"ordinal,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	BeginDate string `xml:"beginDate,omitempty"`

	EndDate string `xml:"endDate,omitempty"`

	Filter *InstantaneousDataFilter `xml:"filter,omitempty"`

	UnitSystem *UnitSystem `xml:"unitSystem,omitempty"`
}

type GetInstantaneousDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getInstantaneousDataResponse"`

	Return_ []*InstantaneousData `xml:"return,omitempty"`
}

type InstantaneousData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService instantaneousData"`

	BeginDate string `xml:"beginDate,omitempty"`

	EndDate string `xml:"endDate,omitempty"`

	StationId int32 `xml:"stationId,omitempty"`

	UnitCd string `xml:"unitCd,omitempty"`

	Values []*InstantaneousDataValue `xml:"values,omitempty"`
}

type InstantaneousDataValue struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService instantaneousDataValue"`

	Flag string `xml:"flag,omitempty"`

	Time string `xml:"time,omitempty"`

	Value float64 `xml:"value,omitempty"`
}

type GetData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getData"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	Ordinal int32 `xml:"ordinal,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	GetFlags bool `xml:"getFlags,omitempty"`

	BeginDate string `xml:"beginDate,omitempty"`

	EndDate string `xml:"endDate,omitempty"`

	AlwaysReturnDailyFeb29 bool `xml:"alwaysReturnDailyFeb29,omitempty"`
}

type GetDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getDataResponse"`

	Return_ []*Data `xml:"return,omitempty"`
}

type Data struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService data"`

	BeginDate string `xml:"beginDate,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	EndDate string `xml:"endDate,omitempty"`

	Flags []string `xml:"flags,omitempty"`

	Values []float64 `xml:"values,omitempty"`
}

type GetCentralTendencyData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getCentralTendencyData"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	GetFlags bool `xml:"getFlags,omitempty"`

	BeginMonth int32 `xml:"beginMonth,omitempty"`

	BeginDay int32 `xml:"beginDay,omitempty"`

	EndMonth int32 `xml:"endMonth,omitempty"`

	EndDay int32 `xml:"endDay,omitempty"`

	CentralTendencyType *CentralTendencyType `xml:"centralTendencyType,omitempty"`
}

type GetCentralTendencyDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getCentralTendencyDataResponse"`

	Return_ []*CentralTendencyData `xml:"return,omitempty"`
}

type CentralTendencyData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService centralTendencyData"`

	*AveragesData

	CentralTendencyType *CentralTendencyType `xml:"centralTendencyType,omitempty"`
}

type GetForecastPeriods struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriods"`
}

type GetForecastPeriodsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPeriodsResponse"`

	Return_ []*ForecastPeriod `xml:"return,omitempty"`
}

type ForecastPeriod struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService forecastPeriod"`

	Description string `xml:"description,omitempty"`

	ForecastPeriod string `xml:"forecastPeriod,omitempty"`
}

type GetHeightDepths struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getHeightDepths"`
}

type GetHeightDepthsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getHeightDepthsResponse"`

	Return_ []*HeightDepth `xml:"return,omitempty"`
}

type GetStationMetadata struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationMetadata"`

	StationTriplet string `xml:"stationTriplet,omitempty"`
}

type GetStationMetadataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getStationMetadataResponse"`

	Return_ *StationMetaData `xml:"return,omitempty"`
}

type GetForecastPoints struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPoints"`

	StationIds []string `xml:"stationIds,omitempty"`

	StateCds []string `xml:"stateCds,omitempty"`

	NetworkCds []string `xml:"networkCds,omitempty"`

	ForecastPointNames []string `xml:"forecastPointNames,omitempty"`

	Hucs []string `xml:"hucs,omitempty"`

	Forecasters []string `xml:"forecasters,omitempty"`

	LogicalAnd bool `xml:"logicalAnd,omitempty"`
}

type GetForecastPointsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getForecastPointsResponse"`

	Return_ []*ForecastPoint `xml:"return,omitempty"`
}

type AreYouThere struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService areYouThere"`
}

type AreYouThereResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService areYouThereResponse"`

	Return_ bool `xml:"return,omitempty"`
}

type GetPeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getPeakData"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	Ordinal int32 `xml:"ordinal,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	GetFlags bool `xml:"getFlags,omitempty"`

	BeginYear int32 `xml:"beginYear,omitempty"`

	EndYear int32 `xml:"endYear,omitempty"`
}

type GetPeakDataResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getPeakDataResponse"`

	Return_ []*PeakData `xml:"return,omitempty"`
}

type PeakData struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService peakData"`

	BeginYear int32 `xml:"beginYear,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	EndYear int32 `xml:"endYear,omitempty"`

	Flags []string `xml:"flags,omitempty"`

	PeakDays []int32 `xml:"peakDays,omitempty"`

	PeakMonths []int32 `xml:"peakMonths,omitempty"`

	Values []float64 `xml:"values,omitempty"`
}

type GetAveragesPeak struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAveragesPeak"`

	StationTriplets []string `xml:"stationTriplets,omitempty"`

	ElementCd string `xml:"elementCd,omitempty"`

	HeightDepth *HeightDepth `xml:"heightDepth,omitempty"`

	Duration *Duration `xml:"duration,omitempty"`

	GetFlags bool `xml:"getFlags,omitempty"`
}

type GetAveragesPeakResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getAveragesPeakResponse"`

	Return_ []*AveragesPeakData `xml:"return,omitempty"`
}

type GetUnits struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getUnits"`
}

type GetUnitsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getUnitsResponse"`

	Return_ []*Unit `xml:"return,omitempty"`
}

type Unit struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService unit"`

	Name string `xml:"name,omitempty"`

	UnitCd string `xml:"unitCd,omitempty"`
}

type GetElements struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getElements"`
}

type GetElementsResponse struct {
	XMLName xml.Name `xml:"http://www.wcc.nrcs.usda.gov/ns/awdbWebService getElementsResponse"`

	Return_ []*Element `xml:"return,omitempty"`
}

type AwdbWebService struct {
	client *gowsdl.SoapClient
}

func NewAwdbWebService(url string, tls bool, auth *gowsdl.BasicAuth) *AwdbWebService {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls, auth)

	return &AwdbWebService{
		client: client,
	}
}

func (service *AwdbWebService) GetForecasts(request *GetForecasts) (*GetForecastsResponse, error) {
	response := &GetForecastsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStations(request *GetStations) (*GetStationsResponse, error) {
	response := &GetStationsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastsByPubDate(request *GetForecastsByPubDate) (*GetForecastsByPubDateResponse, error) {
	response := &GetForecastsByPubDateResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetAveragesData(request *GetAveragesData) (*GetAveragesDataResponse, error) {
	response := &GetAveragesDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) RunDiagnostics(request *RunDiagnostics) (*RunDiagnosticsResponse, error) {
	response := &RunDiagnosticsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetHourlyData(request *GetHourlyData) (*GetHourlyDataResponse, error) {
	response := &GetHourlyDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastEquations(request *GetForecastEquations) (*GetForecastEquationsResponse, error) {
	response := &GetForecastEquationsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetUnitName(request *GetUnitName) (*GetUnitNameResponse, error) {
	response := &GetUnitNameResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStationMetadataMultiple(request *GetStationMetadataMultiple) (*GetStationMetadataMultipleResponse, error) {
	response := &GetStationMetadataMultipleResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPoint(request *GetForecastPoint) (*GetForecastPointResponse, error) {
	response := &GetForecastPointResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStationDataAssuredFlags(request *GetStationDataAssuredFlags) (*GetStationDataAssuredFlagsResponse, error) {
	response := &GetStationDataAssuredFlagsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastEquationsMultiple(request *GetForecastEquationsMultiple) (*GetForecastEquationsMultipleResponse, error) {
	response := &GetForecastEquationsMultipleResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPeriodCentralTendency(request *GetForecastPeriodCentralTendency) (*GetForecastPeriodCentralTendencyResponse, error) {
	response := &GetForecastPeriodCentralTendencyResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastValue(request *GetForecastValue) (*GetForecastValueResponse, error) {
	response := &GetForecastValueResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetElement(request *GetElement) (*GetElementResponse, error) {
	response := &GetElementResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastConfigurations(request *GetForecastConfigurations) (*GetForecastConfigurationsResponse, error) {
	response := &GetForecastConfigurationsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetReservoirMetadataMultiple(request *GetReservoirMetadataMultiple) (*GetReservoirMetadataMultipleResponse, error) {
	response := &GetReservoirMetadataMultipleResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetCentralTendencyPeakData(request *GetCentralTendencyPeakData) (*GetCentralTendencyPeakDataResponse, error) {
	response := &GetCentralTendencyPeakDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecast(request *GetForecast) (*GetForecastResponse, error) {
	response := &GetForecastResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetReservoirMetadata(request *GetReservoirMetadata) (*GetReservoirMetadataResponse, error) {
	response := &GetReservoirMetadataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPeriodAverages(request *GetForecastPeriodAverages) (*GetForecastPeriodAveragesResponse, error) {
	response := &GetForecastPeriodAveragesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetAllForecastsForStation(request *GetAllForecastsForStation) (*GetAllForecastsForStationResponse, error) {
	response := &GetAllForecastsForStationResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStationElements(request *GetStationElements) (*GetStationElementsResponse, error) {
	response := &GetStationElementsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetInstantaneousData(request *GetInstantaneousData) (*GetInstantaneousDataResponse, error) {
	response := &GetInstantaneousDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetData(request *GetData) (*GetDataResponse, error) {
	response := &GetDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetCentralTendencyData(request *GetCentralTendencyData) (*GetCentralTendencyDataResponse, error) {
	response := &GetCentralTendencyDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPeriods(request *GetForecastPeriods) (*GetForecastPeriodsResponse, error) {
	response := &GetForecastPeriodsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetHeightDepths(request *GetHeightDepths) (*GetHeightDepthsResponse, error) {
	response := &GetHeightDepthsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetStationMetadata(request *GetStationMetadata) (*GetStationMetadataResponse, error) {
	response := &GetStationMetadataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetForecastPoints(request *GetForecastPoints) (*GetForecastPointsResponse, error) {
	response := &GetForecastPointsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) AreYouThere(request *AreYouThere) (*AreYouThereResponse, error) {
	response := &AreYouThereResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetPeakData(request *GetPeakData) (*GetPeakDataResponse, error) {
	response := &GetPeakDataResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetAveragesPeak(request *GetAveragesPeak) (*GetAveragesPeakResponse, error) {
	response := &GetAveragesPeakResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetUnits(request *GetUnits) (*GetUnitsResponse, error) {
	response := &GetUnitsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *AwdbWebService) GetElements(request *GetElements) (*GetElementsResponse, error) {
	response := &GetElementsResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
